buildscript {
    ext {
        kotlinVersion = '1.3.61'
        springBootVersion = '2.1.9.RELEASE'
        jooqVersion = '3.12.1'
        retrofitVersion = '2.6.2'
        okhttpVersion = '4.2.1'
    }
    repositories {
        mavenCentral()
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url "https://kotlin.bintray.com/kotlinx" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath group: 'org.jooq', name: 'jooq-codegen', version: '3.12.1'
        classpath 'nu.studer:gradle-jooq-plugin:3.0.3'
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlinVersion"
    }
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'nu.studer.jooq'
apply plugin: 'kotlinx-serialization'

group = 'fsight'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

repositories {
    mavenCentral()
    jcenter()
    maven { url 'https://plugins.gradle.org/m2/' }
    maven { url "https://kotlin.bintray.com/kotlinx" }
}


dependencies {
    compile('org.springframework.boot:spring-boot-starter-jooq')
    compile('org.springframework.boot:spring-boot-starter-thymeleaf')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-mail')
    compile('org.springframework.boot:spring-boot-starter-actuator')
    /*compile('org.springframework.boot:spring-boot-starter-security')*/
    /**WebSockets*/
    compile("org.springframework.boot:spring-boot-starter-websocket")
    compile("org.webjars:webjars-locator-core")
    compile("org.webjars:sockjs-client:1.0.2")
    compile("org.webjars:stomp-websocket:2.3.3")
    compile("org.webjars:bootstrap:3.3.7")
    compile("org.webjars:jquery:3.1.0")
    /** */
    compile('com.fasterxml.jackson.module:jackson-module-kotlin')
    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    compile("org.jetbrains.kotlin:kotlin-reflect")
    /*compile group: 'org.jetbrains.kotlinx', name: 'kotlinx-serialization-runtime', version: '0.14.0'*/


    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('io.projectreactor:reactor-test')

    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
    compile group: 'com.google.guava', name: 'guava', version: '27.0.1-jre'
    compile group: 'com.squareup.retrofit2', name: 'retrofit', version: retrofitVersion
    compile group: 'com.squareup.retrofit2', name: 'converter-simplexml', version: retrofitVersion
    compile group: 'com.squareup.retrofit2', name: 'converter-gson', version: retrofitVersion
    compile group: 'com.squareup.retrofit2', name: 'converter-scalars', version: retrofitVersion
    compile group: 'com.squareup.okhttp3', name: 'okhttp', version: okhttpVersion

    compile group: 'org.jooq', name: 'jooq', version: jooqVersion
    compile group: 'org.jooq', name: 'jooq-meta', version: jooqVersion
    compile group: 'org.jooq', name: 'jooq-codegen', version: jooqVersion

    //HTML to plain text
    compile 'org.jsoup:jsoup:1.11.3'

    //exposed
    compile 'org.jetbrains.exposed:exposed:0.17.6'
    compile 'org.jetbrains.exposed:spring-transaction:0.17.6'

    //db drivers
    compile "com.microsoft.sqlserver:mssql-jdbc:6.4.0.jre7"
    compile('org.postgresql:postgresql')
    runtime('org.postgresql:postgresql')
    jooqRuntime('org.postgresql:postgresql')

    // logging
    compile "net.logstash.logback:logstash-logback-encoder:5.0"
    compile "io.github.microutils:kotlin-logging:1.8.3"

    /*testCompile("org.junit.jupiter:junit-jupiter:5.6.0")*/
    testCompile("org.junit.jupiter:junit-jupiter-api:5.6.0")
    testCompile('org.junit.jupiter:junit-jupiter-params:5.6.0')
    testCompile('org.junit.platform:junit-platform-runner:1.6.0')
    testCompile("org.junit.platform:junit-platform-launcher:1.6.0")
    testCompile("org.junit.platform:junit-platform-commons:1.6.0")
    testCompile("org.junit.platform:junit-platform-engine:1.6.0")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.6.0")

}


test {
    useJUnitPlatform()

    // Always run tests, even when nothing changed.
    dependsOn 'cleanTest'

    testLogging {
        events "passed", "skipped", "failed"
    }
}

/*tasks.withType(Test) {
    useJUnitPlatform()
}*/


task copyTest(type: Copy) {
    from file("$buildDir/libs/youtrack export-0.0.1-SNAPSHOT.jar")
    into file("$buildDir/toArchive")
}

task deleteReact(type: Delete) {
    delete 'src/main/resources/static'
}

task copyReact(type: Copy) {
    from 'D:\\dev\\yt integrations\\frontend\\build'
    into 'src/main/resources/static'
}

task bootJar1 {
    dependsOn 'deleteReact'
    dependsOn 'copyReact'
    dependsOn 'bootJar'
    tasks.findByName('copyReact').mustRunAfter 'deleteReact'
    tasks.findByName('bootJar').mustRunAfter 'copyReact'

}

jooq {
    version = jooqVersion
    edition = 'OSS'
    sample(sourceSets.main) {
        jdbc {
            driver = 'org.postgresql.Driver'
            url = 'jdbc:postgresql://v-ctp-postgres.fs.fsight.world:5432/youtrack'
            user = 'postgres'
            password = 'Qwerty1'
            /*properties {
                property {
                    key = 'ssl'
                    value = 'true'
                }
            }*/
        }
        generator {
            name = 'org.jooq.codegen.DefaultGenerator'
            strategy {
                name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                // ...
            }
            database {
                name = 'org.jooq.meta.postgres.PostgresDatabase'
                inputSchema = 'public'
                forcedTypes {
                    /*forcedType {
                        name = 'varchar'
                        expression = '.*'
                        types = 'JSONB?'
                    }
                    forcedType {
                        name = 'varchar'
                        expression = '.*'
                        types = 'INET'
                    }*/
                    /*forcedType {
                        userType = 'com.google.gson.JsonElement'
                        binding = 'fsight.youtrack.config.PostgresJSONGsonBinding'
                        expression = '.*DETAILS*'
                        types = '.*'
                    }*/
                }
                // ...
            }
            generate {
                relations = true
                deprecated = false
                records = true
                immutablePojos = true
                fluentSetters = true
            }
            target {
                packageName = 'fsight.youtrack.generated.jooq'
                directory = 'src/main/kotlin'
            }
        }
    }
}
